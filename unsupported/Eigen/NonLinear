// This file is part of Eigen, a lightweight C++ template library
// for linear algebra.
//
// Copyright (C) 2009 Thomas Capricelli <orzel@freehackers.org>
//
// Eigen is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// Eigen is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License or the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License and a copy of the GNU General Public License along with
// Eigen. If not, see <http://www.gnu.org/licenses/>.


#ifndef EIGEN_NONLINEAR_MODULE_H
#define EIGEN_NONLINEAR_MODULE_H

#include <Eigen/Core>

namespace Eigen {

/** \ingroup Unsupported_modules
  * \defgroup Support for non linear optimization and non linear least
  * square using minpack routines.
  */
//@{

#if 1
#include <cminpack.h>
#else

/* Declarations for minpack */
typedef int (*minpack_func_nn)(void *p, int n, const double *x, double *fvec, int iflag );
typedef int (*minpack_funcder_nn)(void *p, int n, const double *x, double *fvec, double *fjac, int ldfjac, int iflag );
typedef int (*minpack_func_mn)(void *p, int m, int n, const double *x, double *fvec, int iflag );
typedef int (*minpack_funcder_mn)(void *p, int m, int n, const double *x, double *fvec, double *fjac, int ldfjac, int iflag );
typedef int (*minpack_funcderstr_mn)(void *p, int m, int n, const double *x, double *fvec, double *fjrow, int iflag );

void covar(int n, double *r__, int ldr, const int *ipvt, double tol, double *wa);
#endif

#include "src/NonLinear/qrsolv.h"
#include "src/NonLinear/r1updt.h"
#include "src/NonLinear/r1mpyq.h"
#include "src/NonLinear/rwupdt.h"
#include "src/NonLinear/qrfac.h"
#include "src/NonLinear/fdjac2.h"
#include "src/NonLinear/fdjac1.h"
#include "src/NonLinear/qform.h"
#include "src/NonLinear/lmpar.h"
#include "src/NonLinear/dogleg.h"
#include "src/NonLinear/covar.h"

#include "src/NonLinear/lmder.h"
#include "src/NonLinear/hybrd.h"
#include "src/NonLinear/lmstr.h"
#include "src/NonLinear/lmdif.h"
#include "src/NonLinear/hybrj.h"
#include "src/NonLinear/lmder1.h"
#include "src/NonLinear/lmstr1.h"
#include "src/NonLinear/hybrd1.h"
#include "src/NonLinear/hybrj1.h"
#include "src/NonLinear/lmdif1.h"
#include "src/NonLinear/chkder.h"

//@}

}



#endif // EIGEN_NONLINEAR_MODULE_H
